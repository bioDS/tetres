import pytest

from testfixtures import TempDirectory


@pytest.fixture()
def dir():
    with TempDirectory() as dir:
        yield dir


@pytest.fixture
def five_taxa_newick_list():
    # list of pairwise distances is [0, 1, 2, 1, 0, 3, 2, 3, 0]
    return ["((1:3,5:3):1,(4:2,(3:1,2:1):1):2);", "((1:2,5:2):3,(4:3,(3:1,2:1):2):2);",
            "((1:2,5:2):3,(3:3,(4:1,2:1):2):2);"]


@pytest.fixture
def five_taxa_list_distances():
    return [0, 1, 2, 1, 0, 3, 2, 3, 0]


@pytest.fixture
def five_taxa_nexus_string():
    return ("#NEXUS\n"
            "BEGIN TAXA;\n"
            "\tDIMENSIONS NTAX = 5;\n"
            "\tTAXLABELS\n"
            "\t\tt1\n"
            "\t\tt5\n"
            "\t\tt4\n"
            "\t\tt3\n"
            "\t\tt2\n"
            "\t;\n"
            "END;\n"
            "BEGIN TREES;\n"
            "\tTRANSLATE\n"
            "\t1	t1,\n"
            "\t2	t5,\n"
            "\t3	t4,\n"
            "\t4	t3,\n"
            "\t5	t2\n"
            "\t;\n"
            "\tTREE * t1 = [&R] ((1:3,2:3):1,(3:2,(4:1,5:1):1):2);\n"
            "\tTREE * t2 = [&R] ((1:2,2:2):3,(3:3,(4:1,5:1):2):2);\n"
            "\tTREE * t3 = [&R] ((1:2,2:2):3,(4:3,(3:1,5:1):2):2);\n"
            "END;\n").encode()

@pytest.fixture
def seventeen_taxa_tree_newick():
    return "((((5:9,4:9)I9:1,(((8:5,3:5)I5:1,(6:3,(1:2,(7:1,2:1)I1:1)I2:1)I3:3)I6:1,(13:4,14:4)I4:3)I7:3)I10:5," \
           "((12:13,(17:8,16:8)I8:5)I13:1,(9:12,(11:11,10:11)I11:1)I12:2)I14:1)I15:1,15:16); "


@pytest.fixture
def seventeen_taxa_rank_neighbours_newick():
    return [
        "((((5:9,4:9)I9:1,(((8:5,3:5)I5:1,(6:4,(1:2,(7:1,2:1)I1:1)I2:2)I4:2)I6:1,(13:3,14:3)I3:4)I7:3)I10:5,((12:13,"
        "(17:8,16:8)I8:5)I13:1,(9:12,(11:11,10:11)I11:1)I12:2)I14:1)I15:1,15:16);",
        "((((5:9,4:9)I9:1,(((8:4,3:4)I4:2,(6:3,(1:2,(7:1,2:1)I1:1)I2:1)I3:3)I6:1,(13:5,14:5)I5:2)I7:3)I10:5,((12:13,"
        "(17:8,16:8)I8:5)I13:1,(9:12,(11:11,10:11)I11:1)I12:2)I14:1)I15:1,15:16);",
        "((((5:9,4:9)I9:1,(((8:5,3:5)I5:1,(6:3,(1:2,(7:1,2:1)I1:1)I2:1)I3:3)I6:2,(13:4,14:4)I4:4)I8:2)I10:5,((12:13,"
        "(17:7,16:7)I7:6)I13:1,(9:12,(11:11,10:11)I11:1)I12:2)I14:1)I15:1,15:16);",
        "((((5:8,4:8)I8:2,(((8:5,3:5)I5:1,(6:3,(1:2,(7:1,2:1)I1:1)I2:1)I3:3)I6:1,(13:4,14:4)I4:3)I7:3)I10:5,((12:13,"
        "(17:9,16:9)I9:4)I13:1,(9:12,(11:11,10:11)I11:1)I12:2)I14:1)I15:1,15:16);",
        "((((5:9,4:9)I9:2,(((8:5,3:5)I5:1,(6:3,(1:2,(7:1,2:1)I1:1)I2:1)I3:3)I6:1,(13:4,14:4)I4:3)I7:4)I11:4,((12:13,"
        "(17:8,16:8)I8:5)I13:1,(9:12,(11:10,10:10)I10:2)I12:2)I14:1)I15:1,15:16);",
        "((((5:9,4:9)I9:1,(((8:5,3:5)I5:1,(6:3,(1:2,(7:1,2:1)I1:1)I2:1)I3:3)I6:1,(13:4,14:4)I4:3)I7:3)I10:5,((9:13,"
        "(11:11,10:11)I11:2)I13:1,(12:12,(17:8,16:8)I8:4)I12:2)I14:1)I15:1,15:16);"]
